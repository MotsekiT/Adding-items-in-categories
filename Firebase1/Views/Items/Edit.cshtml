@model Firebase1.Models.Items
@using Firebase1.Repository.Utilities;

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Items", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Items</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ItemCode)

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.ItemSystemCode, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ItemSystemCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ItemSystemCode, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SelectedCategory, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedCategory, new SelectList(@Model.CategoriesSelectList, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "CategoryCode" })
                @Html.ValidationMessageFor(model => model.SelectedCategory, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ItemName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ItemName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ItemName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ItemPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ItemPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ItemPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.ItemImageName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ItemImageName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ItemImageName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.ItemImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
    
        <div class="col-md-10">
            @if (String.IsNullOrEmpty(@Model.ItemCode) == false)
            {
                <img src="@Model.ItemImagePath" width="100" style="border-radius:5px; border:1px solid #bbb " />
                <br>

                <div>
                    <label title="Modify">Modify:</label>
                    <input type="file" class="form-control" name="file" accept="image/*"  />
                </div>
            }
            @* Keep this empty *@
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts{
    @{
        <partial name="_ValidationScriptsPartial" />
    }

    <script>
        //$(document).ready(function () {
        //    $('.summernote').summernote({
        //        height: 250
        //    });
        //});
        ////function validateInput() {
        ////    if (document.getElementById("uploadBox").value == "") {
        ////        Swal.fire(
        ////            'Error!',
        ////            'Please upload an Image!',
        ////            'error'
        ////        )
        ////        return false;
        ////    }
        ////    return true;
        ////}
    </script>
}